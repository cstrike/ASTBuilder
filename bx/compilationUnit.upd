IMPORT "java7.dtd" AS s
IMPORT "java8.dtd" AS v

$source = doc("example1InJava7.xml")
$view = doc("example1InJava8.xml")

START = updateCompilationUnit($source/compilationUnit, $view/compilationUnit)

PROCEDURE updateCompilationUnit(source $src AS s:compilationUnit, view $view AS v:compilationUnit) =
UPDATE compilationUnit[$sPackageDeclaration AS s:packageDeclaration?, $sImportDeclarations AS s:importDeclaration*, $sTypeDeclarations AS s:typeDeclaration*] IN $src BY 
       updatePackageDeclarationQ($sPackageDeclaration, $vPackageDeclaration);
       updateImportDeclarations($sImportDeclarations, $vImportDeclarations);
       updateTypeDeclarations($sTypeDeclarations, $vTypeDeclarations)
FOR VIEW compilationUnit[$vPackageDeclaration AS v:packageDeclaration?, $vImportDeclarations AS v:importDeclaration*, $vTypeDeclarations AS v:typeDeclaration*] IN $view

(:Declaration:)

PROCEDURE updatePackageDeclarationQ(source $src AS s:packageDeclaration?, view $view AS v:packageDeclaration?) =
UPDATE $sPackageDeclaration IN $src BY
	MATCH -> REPLACE . WITH $vPackageDeclaration
	| UNMATCHV -> CREATE VALUE <packageDeclaration>
				    <name>
				     <simpleName>
				      <identifier/>
				     </simpleName>
				    </name>
				   </packageDeclaration>
FOR VIEW $vPackageDeclaration IN $view

PROCEDURE updateImportDeclarations(source $src AS s:importDeclaration*, view $view AS v:importDeclaration*) =
UPDATE $sImportDeclaration IN $src BY
	MATCH -> REPLACE . WITH $vImportDeclaration 
	| UNMATCHV -> CREATE VALUE <importDeclaration static="false" onDemand="false">
	  	      	     	    <name>
				     <simpleName>
				      <identifier/>
				     </simpleName>
				    </name>
	  	      	     	   </importDeclaration>
FOR VIEW $vImportDeclaration IN $view

PROCEDURE updateTypeDeclarations(source $src AS s:typeDeclaration*, view $view AS v:typeDeclaration*) =
UPDATE $sDeclaration IN $src BY
	MATCH -> updateTypeDeclaration($sDeclaration, $vDeclaration)
	| UNMATCHV -> CREATE VALUE <typeDeclaration interface="true">
	  	      	     	    <simpleName>
				     <identifier/>
				    </simpleName>
	  	      	     	   </typeDeclaration> 
FOR VIEW $vDeclaration IN $view
MATCHING SOURCE BY $sDeclaration/simpleName/identifier VIEW BY $vDeclaration/simpleName/identifier 
(:Here matching by the name of class or interface:)

PROCEDURE updateTypeDeclaration(source $src AS s:typeDeclaration, view $view AS v:typeDeclaration) =
UPDATE typeDeclaration[@interface[$sInterface AS String], $sModifiers AS s:modifier*, $sSimpleName AS s:simpleName, $sTypeParameters AS s:typeParameter*, $sExtendsTypes AS s:extendsType*, $sImplementsTypes AS s:implementsType*, $sBodyDeclarations AS s:bodyDeclaration*] IN $src BY
       REPLACE $sInterface WITH $vInterface;
       updateModifiers($sModifiers, $vModifiers);
       REPLACE $sSimpleName WITH $vSimpleName;
       updateTypeParameters($sTypeParameters, $vTypeParameters);
       updateExtendsTypes($sExtendsTypes, $vExtendsTypes);
       updateImplementsType($sImplementsTypes, $vImplementsTypes);
       updateBodyDecalrations($sBodyDeclarations, $vBodyDeclarations)
FOR VIEW typeDeclaration[@interface[$vInterface AS String], $vModifiers AS v:modifier*, $vSimpleName AS v:simpleName, $vTypeParameters AS v:typeParameter*, $vExtendsTypes AS v:extendsType*, $vImplementTypes AS v:implementType*, $vBodyDeclarations AS v:bodyDeclaration*] IN $view

PROCEDURE updateModifiers(source $src AS s:modifier*, view $view AS v:modifier*) =
UPDATE $s IN $src BY
       MATCH -> REPLACE . WITH $v
       UNMATCHV -> CREATE VALUE <modifier></modifier>
FOR VIEW $v IN $view

PROCEDURE updateTypeParameters(source $src AS s:typeParameter*, view $view AS v:typeParameter*) =
UPDATE $s IN $src BY
       MATCH -> REPLACE . WITH $v
       UNMATCHV -> CREATE VALUE <typeParameter>
				 <simpleName>
				  <identifier/>
				 </simpleName>
       		   	  	</typeParameter>
FOR VIEW $v IN $view

PROCEDURE updateExtendsTypes(source $src AS s:extendsType*, view $view AS v:extendsType*) =
UPDATE $s IN $src BY
       MATCH -> REPLACE . WITH $v
       UNMATCHV -> CREATE VALUE <superClassType>
       		   	  	 <tp>
				  <primitiveType/>
				 </tp>
       		   	  	</superClassType>
FOR VIEW $v IN $view

PROCEDURE updateImplementsTypes(source $src AS s:implementsType*, view $view AS v:implementsType*) =
UPDATE $s IN $src BY
       MATCH -> REPLACE . WITH $v
       UNMATCHV -> CREATE VALUE <implementInterfaceType>
				 <tp>
				  <primitiveType/>
				 </tp>
				</implementInterfaceType>
FOR VIEW $v IN $view

PROCEDURE updateBodyDeclarations(source $src AS s:bodyDeclaration*, view $view AS v:bodyDeclaration*) =
UPDATE $sDeclaration IN $src BY
       MATCH -> IF $sDeclaration/@kind/string()="fieldDeclaration"
       	     	THEN REPLACE . WITH $vDeclaration
		ELSE CASE $vDeclaraiont OF
		{
			bodyDeclaration[@id[$vId AS String], @kind[$vKind AS String], $vTypeDeclaration AS v:typeDeclaration]
			-> CASE $sDeclaration OF
			{
				bodyDeclaration[@id[$sId AS String], @kind[$sKind AS String], $sTypeDeclaration AS s:typeDeclaration]
				-> REPLACE $sId WITH $vId;
				   REPLACE $sKind WITH $vKind;
				   updateTypeDeclaration($sTypeDeclaration, $vTypeDeclaration) 
			}
			| bodyDeclaration[@id[$vId AS String], @kind[$vKind AS String], $vMethodDeclaration AS v:methodDeclaration]
			-> CASE $sDeclaration OF
			{
				bodyDeclaration[@id[$sId AS String], @kind[$sKind AS String], $sMethodDeclaration AS s:methodDeclaration]
				-> REPLACE $sId WITH $vId;
				   REPLACE $sKind WITH $vKind;
				   updateMethodDeclaration($sMethodDeclaration, $vMethodDeclaration) 
			}
			| bodyDeclaration[@id[$vId AS String], @kind[$vKind AS String], $vInitializer AS v:initializer]
			-> CASE $sDeclaration OF
			{
				bodyDeclaration[@id[$sId AS String], @kind[$sKind AS String], $sInitializer AS s:initializer]
				-> REPLACE $sId WITH $vId;
				   REPLACE $sKind WITH $vKind;
				   updateInitializer($sInitializer, $vInitializer)
			}
		}
	UNMATCHV ->  CASE $vDeclaration OF
	{
		bodyDeclaration[@id[$vId AS String], @kind[$vKind AS String], $vTypeDeclaration AS v:typeDeclaration]
		-> CREATE VALUE <bodyDeclaration id="" kind="typeDeclaration">
		   	  	 <typeDeclaration interface="">
				  <simpleName>
				   <identfier/>
				  </simpleName>
				 </typeDeclaration>
		   	  	</bodyDeclaration>
		| bodyDeclaration[@id[$vId AS String], @kind[$vKind AS String], $vMethodDeclaration AS v:methodDeclaration]
		-> CREATE VALUE <bodyDeclaration id="" kind="methedDeclaration">
		   	  	 <methodDeclaration constructor="" extraDimensions="">
				  <simpleName>
				   <identifier/>
				  </simpleName>
				 </methodDeclaration>
		   	  	</bodyDeclaration>
		| bodyDeclaration[@id[$vId AS String], @kind[$vKind AS String], $vInitializer AS v:initializer]
		-> CREATE VALUE <bodyDeclaration id="" kind="initializer">
		   	  	 <initializer>
				  <modifier/>
				  <block>
+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
				  </block>
				 </initializer>
		   	  	</bodyDeclaration>
		| bodyDeclaration[@id[$vId AS String], @kind[$vKind AS String], $vFieldDeclaration AS v:fieldDeclaration]
		-> CREATE VALUE <bodyDeclaration id="" kind="fieldDeclaration">
		   	  	 <fieldDeclaration>
				  <tp>
				  </tp>
				  <variableDeclarationFragment extraDimensions="">
				   <simpleName>
				    <identifier/>
				   </simpleName>
				  </variableDeclarationFragment>
				 </fieldDeclaration>
		   	  	</bodyDeclaration>
	}
FOR VIEW $Declaration IN $view
MATCHING SOURECE BY $sDeclaration/@id/string() VIEW BY $vDeclaration/@id/string()

PROCEDURE updateMethodDeclaration(source $src AS s:methodDeclaration, view $view AS v:methodDeclaration) =
UPDATE methodDeclaration[@constructor[$sConstructor AS String], @extraDimensions[$sExtraDimensions AS String], $sModifiers AS s:modifier*, $sTypeParameters AS s:typeParameter*, $sReturnType AS s:returnType?, $sSimpleName AS s:simpleName, $sFormalParameters AS s:formalParameter*, $sThrownExceptions AS s:thrownException*, $sBlock AS s:block?] IN $src BY
       REPLACE $sConstructor WITH $vConstructor;
       REPLACE $sExtraDimensions WITH $vExtraDimensions;
       updateModifiers($sModifiers, $vModifiers);
       updateTypeParameters($sTypeParameters, $vTypeParameters);
       updateReturnTypeQ($sReturnType, $vReturnType);
       REPLACE $sSimpleName WITH $vSimpleName;
       updateFormalParameters($sFormalParameters, $vFormalParameters);
       updateThrownExceptions($sThrownExceptions, $vThrownExceptions);
       updateBlockQ($sBlock, $vBlock)
FOR VIEW methodDeclaration[@constructor[$vConstructor AS String], @extraDimensions[$vExtraDimensions AS String], $vModifiers AS v:modifier*, $vTypeParameters AS v:typeParameter*, $vReturnType AS v:returnType?, $vSimpleName AS v:simpleName, $vFormalParameters AS v:formalParameter*, $vThrownExceptions AS v:thrownException*, $vBlock AS v:block?]

PROCEDURE updateReturnTypeQ(source $src AS s:returnType?, view $view AS v:returnType?) =
UPDATE $s IN $src BY
       MATCH -> REPLACE . WITH $v
       | UNMATCHV -> CREATE VALUE <returnType>
       	 	     	     	   <tp>
				    <primitiveType/>
				   </tp>
			    	  </returnType>
FOR VIEW $v IN $view 

PROCEDURE updateFormalParameters(source $src AS s:formalParameter*, view $view AS v:formalParameter*) =
UPDATE $s IN $src BY
       MATCH -> REPLACE . WITH $v
       | UNMATCHV -> CREATE VALUE <formalParameter>
				   <tp>
				    <primitiveType/>
				   </tp>
				   <simpleName>
				    <identifier/>
				   </simpleName>
				  </formalParameter>
FOR VIEW $v IN $view 

PROCEDURE updateThrownExceptions(source $src AS s:thrownException*, view $view AS v:thrownException*) =
UPDATE $s IN $src BY
       MATCH -> REPLACE . WITH $v
       | UNMATCHV -> CREATE VALUE <thrownException>
       	 	     	    	   <name>
				    <simpleName>
				     <identifier/>
				    </simpleName>
				   </name>
       	 	     	    	  </thrownException>
FOR VIEW $v IN $view 

PROCEDURE updateBlockQ(source $src AS s:block?, view $view AS v:block?) =
UPDATE $s IN $src BY
       MATCH -> updateBlock($s, $v)
       | UNMATCHV -> CREATE VALUE <block>
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
       	 	     	    	  </block>
FOR VIEW $v IN $view

PROCEDURE updateInitializer(source $src AS s:staticInitializer, view $view AS v:staticInitializer) =
UPDATE initializer[$sModifier AS s:modifier, $sBlock AS s:block] IN $src BY
       REPLACE $sModifier WITH $vModifier;
       updateBlock($sBlock, $vBlock)
FOR VIEW initializer[$vModifier AS v:modifier, $vBlock AS v:block] IN $view






PROCEDURE updateArguments(source $src AS s:argument*, view $view AS v:argument*) =
UPDATE $sArgument IN $src BY
	MATCH -> updateArgument($sArgument, $vArgument)
	| UNMATCHV -> CREATE VALUE
	<argument>
	 <expression>
	  <assignmentExpression>
	   <conditionalExpression>
	    <conditionalOrExpression>
	     <conditionalAndExpression>
	      <inclusiveOrExpression>
	       <exclusiveOrExpression>
	        <andExpression>
	         <equalityExpression>
		  <relationalExpression>
		   <shiftExpression>
		    <additiveExpression>	
		     <mutiplicativeExpression>
		      <unaryExpression>
		       <unaryExpressionNotPlusMinus>
		        <postfixExpression>
			 <expressionName>
			  <identifier/>
			 </expressionName>
			</postfixExpression>
		       </unaryExpressionNotPlusMinus>
		      </unaryExpression>
		     </mutiplicativeExpression>
		    </additiveExpression>
		   </shiftExpression>
		  </relationalExpression>
	         </equalityExpression>
		</andExpression>
	       </exclusiveOrExpression>
	      </inclusiveOrExpression>
	     </conditionalAndExpression>
	    </conditionalOrExpression>
	   </conditionalExpression>
	  </assignmentExpression>
	 </expression>
	</argument> 
FOR VIEW $vArgument IN $view

PROCEDURE updateArgument(source $src AS s:argument, view $src AS v:argument) =
REPLACE $src WITH $view

PROCEDURE updateVariableInitializerQ(source $src AS s:variableInitializer?, view $view AS v:variableInitializer?) =
UPDATE $sVariableInitializer IN $src BY
	MATCH -> updateVariableInitializer($sVariableInitializer, $vVariableInitializer)
	| UNMATCHV -> CREATE VALUE <variableInitializer>
				    <expression>
				     <assignmentExpression>
				      <conditionalExpression>
	    			       <conditionalOrExpression>
	     			        <conditionalAndExpression>
	      			         <inclusiveOrExpression>
	       				  <exclusiveOrExpression>
	        			   <andExpression>
	         			    <equalityExpression>
		  			     <relationalExpression>
		   			      <shiftExpression>
		    			       <additiveExpression>	
		     			        <mutiplicativeExpression>
		      			         <unaryExpression>
		       				  <unaryExpressionNotPlusMinus>
		        			   <postfixExpression>
			 			    <expressionName>
			  			     <identifier/>
			 			    </expressionName>
						   </postfixExpression>
		       				  </unaryExpressionNotPlusMinus>
		      				 </unaryExpression>
		     			        </mutiplicativeExpression>
		    			       </additiveExpression>
		   			      </shiftExpression>
		  			     </relationalExpression>
	         			    </equalityExpression>
					   </andExpression>
	       				  </exclusiveOrExpression>
	      				 </inclusiveOrExpression>
	     			        </conditionalAndExpression>
	    			       </conditionalOrExpression>
	   			      </conditionalExpression>
	  			     </assignmentExpression>
	 			    </expression>
		    	   	   </variableInitializer>
FOR VIEW $vVariableInitializer IN $view 

PROCEDURE updateVariableInitializer(source $src AS s:variableInitializer, view $view AS v:variableInitializer) =
UPDATE variableInitializer[@atype[$sTp AS String],$sVI AS (s:expression | s:arrayInitializer)] IN $src BY
	MATCH -> CASE $vVI OF
	{
		$vExpression AS v:expression
		-> CASE $sVI OF
		{
			$sExpression AS s:expression
			-> updateExpression($sExpression, $vExpression)
		}
		| $vArrayInitializer AS v:arrayInitializer
		-> CASE $sVI OF
		{
			$sArrayInitializer AS s:arrayInitilizer
			-> updateArrayInitializer($sArrayInitializer, $vArrayInitializer)
		}
	}
	| UNMATCHV -> CASE $vVI OF
	{
		v:expression -> CREATE VALUE 
			     	     <variableInitializer atype = "">
				      <expression>
				       <assignmentExpression>
				        <conditionalExpression>
	    			         <conditionalOrExpression>
	     			          <conditionalAndExpression>
	      			           <inclusiveOrExpression>
	       				    <exclusiveOrExpression>
	        			     <andExpression>
	         			      <equalityExpression>
		  			       <relationalExpression>
		   			        <shiftExpression>
		    			         <additiveExpression>	
		     			          <mutiplicativeExpression>
		      			           <unaryExpression>
		       				    <unaryExpressionNotPlusMinus>
		        			     <postfixExpression>
			 			      <expressionName>
			  			       <identifier/>
			 			      </expressionName>
						     </postfixExpression>
		       				    </unaryExpressionNotPlusMinus>
		      				   </unaryExpression>
		     			          </mutiplicativeExpression>
		    			         </additiveExpression>
		   			        </shiftExpression>
		  			       </relationalExpression>
	         			      </equalityExpression>
					     </andExpression>
	       				    </exclusiveOrExpression>
	      				   </inclusiveOrExpression>
	     			          </conditionalAndExpression>
	    			         </conditionalOrExpression>
	   			        </conditionalExpression>
	  			       </assignmentExpression>
	 			      </expression>
		    	   	     </variableInitializer>
		| v:arrayInitializer -> CREATE VALUE <variableInitializer atype = "">
				      	     	    <arrayInitializer>
						    </arrayInitializer>
			       			   </variableInitializer>
	}
FOR VIEW variableInitializer[@atype[$vTp AS String], $vVI AS (v:expression | v:arrayInitializer)] IN $view
MATCHING SOURCE BY $sTp VIEW BY $vTp

PROCEDURE updateExpression(source $src AS s:expression, view $view AS v:expression) =
REPLACE $src WITH $view


(:Types:)



(:Blocks and Commands:)

PROCEDURE updateBlock(source $src AS s:block, view $view AS v:block) =
UPDATE block[$sStmts AS s:statement*] IN $src BY
	updateStatements($sStmts, $vStmts)
FOR VIEW block[$vStmts AS v:statement*] IN $view

PROCEDURE updateStatements(source $src AS s:statement*, view $view AS v:statement*) =
UPDATE statement[@atype[$sat AS String], @marker[$sMarker AS String], @isOperationChain[$sIsOpChain AS String], @isLast[$isLast AS String], @opLevel[$sOpLevel AS String], $sStmt AS (s:localVariableDeclarationStatement | s:labeledStatement | s:ifStatement | s:whileStatement | s:forStatement | s:block | s:emptyStatement | s:expressionStatement | s:switchStatement | s:doStatement | s:breakStatement | s:continueStatement | s:returnStatement | s:synchronizedStatement | s:throwsStatement | s:tryStatement | s:enhancedForStatement) ] IN $src BY
	MATCH -> REPLACE $sat WITH $vat; 
	      	 REPLACE $sMarker WITH $vMark;
		 REPLACE $sIsOpChain WITH $vIsOpChain;
		 REPLACE $sOpLevel WITH $vOpLevel; 
	      	 IF $sIsOpChain = "true"
		 THEN CASE $sStmt OF
		      {
			$enhancedForStatement AS s:enhancedForStatement
			-> synchronizationMain($enhancedForStatement, $vStmt)
		      }  
		 ELSE 		 
		   updateStatement($sStmt, $vStmt) 
	| UNMATCHV -> IF $vIsOpChain = "true"
	  	      THEN  CREATE VALUE
				     <statement 
				     	atype = "" 
					marker = "" 
					isOpChain = "true" 
					isLast = "">
			 	      <enhancedForStatement opStmtType = "">
				       <itVariable>
					<tp>
					 <referenceType>
					  <classType>
					   <typeName>
					    <identifier/>
					   </typeName>
					  </classType>
					 </referenceType>
					</tp>
					<variableDeclarator>
					 <variableDeclaratorId>
					  <identifier/>
					  <dims/>
					 </variableDeclaratorId>
					</variableDeclarator>
				       </itVariable>
				       <itCollection>
					<expression>
					 <assignmentExpression>
				          <conditionalExpression>
	    			           <conditionalOrExpression>
	     			            <conditionalAndExpression>
	      			             <inclusiveOrExpression>
	       				      <exclusiveOrExpression>
	        			       <andExpression>
	         			        <equalityExpression>
		  			         <relationalExpression>
		   			          <shiftExpression>
		    			           <additiveExpression>	
		     			            <mutiplicativeExpression>
		      			             <unaryExpression>
		       				      <unaryExpressionNotPlusMinus>
		        			       <postfixExpression>
			 			        <expressionName>
			  			         <identifier/>
			 			        </expressionName>
						       </postfixExpression>
		       				      </unaryExpressionNotPlusMinus>
		      				     </unaryExpression>
		     			            </mutiplicativeExpression>
		    			           </additiveExpression>
		   			          </shiftExpression>
		  			         </relationalExpression>
	         			        </equalityExpression>
					       </andExpression>
	       				      </exclusiveOrExpression>
	      				     </inclusiveOrExpression>
	     			            </conditionalAndExpression>
	    			           </conditionalOrExpression>
	   			          </conditionalExpression>
	  			         </assignmentExpression>
					</expression>
				       </itCollection>
				       <statement 
				       	  atype="" 
					  marker = "" 
					  isOpChain = "" 
					  isLast = "">
					<emptyStatement/>
				       </statement>
			 	      </enhancedForStatement>
				     </statement>		      
		      ELSE	    
		         CREATE VALUE <statement atype="" marker = "" isOpChain = "" isLast = "">
	  	      	     	        <emptyStatement/>
	  	      	     	      </statement>
FOR VIEW statement[@atype[$vat AS String], @marker[$vMarker AS String], @isOperationChain[$vIsOpChain AS String], @opLevel[$vOpLevel AS String], $vStmt AS (v:localVariableDeclarationStatement | v:labeledStatement | v:ifStatement | v:whileStatement | v:forStatement | v:block | v:emptyStatement | v:expressionStatement | v:switchStatement | v:doStatement | v:breakStatement | v:continueStatement | v:returnStatement | v:synchronizedStatement | v:throwsStatement | v:tryStatement | v:enhancedForStatement) ] IN $view
MATCHING SOURCE BY $sMarker VIEW BY $vMarker

PROCEDURE updateStatement(source $src AS s:statement, view $view AS v:statement) =
REPLACE $src WITH $view

(:Synchronization Main function:)

PROCEDURE synchronizationMain(source $src AS s:enhancedForStatement, view $view AS (v:localVariableDeclarationStatemen | v:labeledStatement | v:ifStatementt | v:whileStatement | v:forStatement | v:block | v:emptyStatement | v:expressionStatement | v:switchStatement | v:doStatement | v:breakStatement | v:continueStatement | v:returnStatement | v:synchronizedStatement | v:throwsStatement | v:tryStatement | v:enhancedForStatement)) =
UPDATE enhancedForStatement[@opStmtType[$opStmtType AS String], $var AS s:itVariable, $collection AS s:itCollection, $loopStmt AS s:statement, $operation AS s:operation?] IN $src BY
	IF $opStmtType = "match"
	THEN  CASE $vStmt OF
	   {
		ifStatement[expression[assignmentExpression[conditonalExpression[conditionalOrExpression[conditionalAndExpression[inclusiveOrExpression[exclusiveOrExpression[andExpression[equalityExpression[relationalExpression[shiftExpression[additiveExpression[mutiplicativeExpression[unaryExpression[unaryExpressionNotPlusMinus[postfixExpression[primary[primaryNoNewArray[$methodInvocation AS v:methodInvocation]]]]]]]]]]]]]]]]]], $stmt AS v:statement]
		-> updateByMethodInvocation($opStmtType, $var, $collection, $loopStmt, $operation, $methodInvocation);
		   updateByLastStatement($loopStmt, $stmt)
	   }
	ELSE IF $opStmtType = "forEach" 
	THEN CASE $vStmt OF
	   {   
		expressionStatement[statementExpression[$methodInvocation AS v:methodInvocation]]
		-> updateByMethodInvocation($opStmtType, $var, $collection, $loopStmt, $operation, $methodInvocation)
	   }
	ELSE IF $opStmtType = "reduce"
	THEN CASE $vStmt OF
	   {
		expressionStatement[statementExpression[assignment[$leftHandSide AS v:leftHandside, assignmentOperator[equal[]], assignmentExpression[conditonalExpression[conditionalOrExpression[conditionalAndExpression[inclusiveOrExpression[exclusiveOrExpression[andExpression[equalityExpression[relationalExpression[shiftExpression[additiveExpression[mutiplicativeExpression[unaryExpression[unaryExpressionNotPlusMinus[postfixExpression[primary[primaryNoNewArray[$methodInvocation AS v:methodInvocation]]]]]]]]]]]]]]]]]]]]
		-> updateByMethodInvocation($opStmtType, $var, $collection, $loopStmt, $operation, $methodInvocation);
		   updateByLeftHandSide($loopStmt, $leftHandSide)
	   }
	ELSE{
	   CASE $vStmt OF
	   {
		v:ifStatement -> REPLACE $opStmtType WITH "match"
		| expressionStatement[statementExpression[v:methodInvocation]] 
		  -> REPLACE $opStmtType WITH "forEach"
		| expressionStatement[statementExpression[v:assigment]]
		  -> REPLACE $opStmtType WITH "reduce" 
	   };
	   synchronizationMain($src, $view) 
	}
FOR VIEW $vStmt IN $view

PROCEDURE updateByMethodInvocation(source $opStmtType AS String, source $var AS s:itVariable, source $collection AS s:itCollection, source $loopStmt AS s:statement, source $operation AS s:operation?, view $view AS v:methodInvocation) =
CASE $view OF
{
	methodInvocation[@opMarker[$opMarker AS String], primary[primaryNoNewArray[$methodInvocation AS v:methodInvocation]], $identifier AS v:identifier, $arguments AS v:argument*]
	->  IF $identifier != "stream" 
	    THEN CASE $operation OF
	      {
		operation[$opId AS s:opId, $opName AS s:opName, $parameter AS s:parameterPart, $op AS s:operation?]
		-> REPLACE $opId WITH $opMarker;
		   REPLACE $opName WITH $identifier;
		   REPLACE $parameter WITH $arguments//parameterPart
	      };
	      IF $opation/opName = "reduce"
	      THEN UPDATE statement[@atype[String], @maker[$sMarker AS String], @isOperationChain[String], @operation[String], @isLast[$isLast AS String], expressionStatement[statementExpression[assigment[$operator AS s:assigmentOperator]]]] IN $loopStmt//statement BY
			IF $lambdaExp = <lambdaExpression>
					  <parameterPart>
					   <lambdaParameter>
					    <variableDeclaratorId>
					     <identifier>accumulator</identifier>
					     <dims>0</dims>
					    </variableDeclaratorId>
					   </lambdaParameter>
					   <lambdaParameter>
					    <variableDeclaratorId>
					     <identifier>_item</identifier>
					     <dims>0</dims>
					    </variableDeclaratorId>
					   </lambdaParameter>
					  </parameterPart>
					  <lambdaBody>
					   <expression>
					    <assignmentExpression>
				             <conditionalExpression>
	    			              <conditionalOrExpression>
	     			               <conditionalAndExpression>
	      			                <inclusiveOrExpression>
	       				         <exclusiveOrExpression>
	        			          <andExpression>
	         			           <equalityExpression>
		  			            <relationalExpression>
		   			             <shiftExpression>
		    			              <additiveExpression>
						       <additiveExpression>	
		     			                <mutiplicativeExpression>
		      			                 <unaryExpression>
		       				          <unaryExpressionNotPlusMinus>
		        			           <postfixExpression>
			 			            <expressionName>
			  			             <identifier>accumulator</identifier>
			 			            </expressionName>
						           </postfixExpression>
		       				          </unaryExpressionNotPlusMinus>
		      				         </unaryExpression>
		     			               	</mutiplicativeExpression>
		    			               </additiveExpression>
						       <additiveOperator>+</additiveOperator>
						       <mutiplicativeExpression>
		      			                <unaryExpression>
		       				         <unaryExpressionNotPlusMinus>
		        			          <postfixExpression>
			 			           <expressionName>
			  			            <identifier>_item</identifier>
			 			           </expressionName>
						          </postfixExpression>
		       				         </unaryExpressionNotPlusMinus>
		      				        </unaryExpression>
		     			               </mutiplicativeExpression>
						      </additiveExpression>
						     </shiftExpression>
		  			            </relationalExpression>
	         			           </equalityExpression>
					          </andExpression>
	       				         </exclusiveOrExpression>
	      				        </inclusiveOrExpression>
	     			               </conditionalAndExpression>
	    			              </conditionalOrExpression>
	   			             </conditionalExpression>
	  			            </assignmentExpression>
					   </expression>
					  </lambdaBody>
			    	       	 </lambdaExpression>
			THEN REPLACE $operator WITH "+="
			ELSE IF $lambdaExp = <lambdaExpression>
					  <parameterPart>
					   <lambdaParameter>
					    <variableDeclaratorId>
					     <identifier>accumulator</identifier>
					     <dims>0</dims>
					    </variableDeclaratorId>
					   </lambdaParameter>
					   <lambdaParameter>
					    <variableDeclaratorId>
					     <identifier>_item</identifier>
					     <dims>0</dims>
					    </variableDeclaratorId>
					   </lambdaParameter>
					  </parameterPart>
					  <lambdaBody>
					   <expression>
					    <assignmentExpression>
				             <conditionalExpression>
	    			              <conditionalOrExpression>
	     			               <conditionalAndExpression>
	      			                <inclusiveOrExpression>
	       				         <exclusiveOrExpression>
	        			          <andExpression>
	         			           <equalityExpression>
		  			            <relationalExpression>
		   			             <shiftExpression>
		    			              <additiveExpression>
						       <additiveExpression>	
		     			                <mutiplicativeExpression>
		      			                 <unaryExpression>
		       				          <unaryExpressionNotPlusMinus>
		        			           <postfixExpression>
			 			            <expressionName>
			  			             <identifier>accumulator</identifier>
			 			            </expressionName>
						           </postfixExpression>
		       				          </unaryExpressionNotPlusMinus>
		      				         </unaryExpression>
		     			               	</mutiplicativeExpression>
		    			               </additiveExpression>
						       <additiveOperator>-</additiveOperator>
						       <mutiplicativeExpression>
		      			                <unaryExpression>
		       				         <unaryExpressionNotPlusMinus>
		        			          <postfixExpression>
			 			           <expressionName>
			  			            <identifier>_item</identifier>
			 			           </expressionName>
						          </postfixExpression>
		       				         </unaryExpressionNotPlusMinus>
		      				        </unaryExpression>
		     			               </mutiplicativeExpression>
						      </additiveExpression>
						     </shiftExpression>
		  			            </relationalExpression>
	         			           </equalityExpression>
					          </andExpression>
	       				         </exclusiveOrExpression>
	      				        </inclusiveOrExpression>
	     			               </conditionalAndExpression>
	    			              </conditionalOrExpression>
	   			             </conditionalExpression>
	  			            </assignmentExpression>
					   </expression>
					  </lambdaBody>
			    	       	 </lambdaExpression>
			THEN REPLACE $operator WITH "-="
			ELSE IF $lambdaExp = <lambdaExpression>
					  <parameterPart>
					   <lambdaParameter>
					    <variableDeclaratorId>
					     <identifier>accumulator</identifier>
					     <dims>0</dims>
					    </variableDeclaratorId>
					   </lambdaParameter>
					   <lambdaParameter>
					    <variableDeclaratorId>
					     <identifier>_item</identifier>
					     <dims>0</dims>
					    </variableDeclaratorId>
					   </lambdaParameter>
					  </parameterPart>
					  <lambdaBody>
					   <expression>
					    <assignmentExpression>
				             <conditionalExpression>
	    			              <conditionalOrExpression>
	     			               <conditionalAndExpression>
	      			                <inclusiveOrExpression>
	       				         <exclusiveOrExpression>
	        			          <andExpression>
	         			           <equalityExpression>
		  			            <relationalExpression>
		   			             <shiftExpression>
		    			              <additiveExpression>
		     			               <mutiplicativeExpression>
							<mutiplicativeExpression>
		      			                 <unaryExpression>
		       				          <unaryExpressionNotPlusMinus>
		        			           <postfixExpression>
			 			            <expressionName>
			  			             <identifier>accumulator</identifier>
			 			            </expressionName>
						           </postfixExpression>
		       				          </unaryExpressionNotPlusMinus>
		      				         </unaryExpression>
		     			               	</mutiplicativeExpression>
							<multiOperator>*</multiOperator>
		      			                <unaryExpression>
		       				         <unaryExpressionNotPlusMinus>
		        			          <postfixExpression>
			 			           <expressionName>
			  			            <identifier>_item</identifier>
			 			           </expressionName>
						          </postfixExpression>
		       				         </unaryExpressionNotPlusMinus>
		      				        </unaryExpression>
		     			               </mutiplicativeExpression>
						      </additiveExpression>
						     </shiftExpression>
		  			            </relationalExpression>
	         			           </equalityExpression>
					          </andExpression>
	       				         </exclusiveOrExpression>
	      				        </inclusiveOrExpression>
	     			               </conditionalAndExpression>
	    			              </conditionalOrExpression>
	   			             </conditionalExpression>
	  			            </assignmentExpression>
					   </expression>
					  </lambdaBody>
			    	       	 </lambdaExpression>
			THEN REPLACE $operator WITH "*="
			ELSE IF $lambdaExp = <lambdaExpression>
					  <parameterPart>
					   <lambdaParameter>
					    <variableDeclaratorId>
					     <identifier>accumulator</identifier>
					     <dims>0</dims>
					    </variableDeclaratorId>
					   </lambdaParameter>
					   <lambdaParameter>
					    <variableDeclaratorId>
					     <identifier>_item</identifier>
					     <dims>0</dims>
					    </variableDeclaratorId>
					   </lambdaParameter>
					  </parameterPart>
					  <lambdaBody>
					   <expression>
					    <assignmentExpression>
				             <conditionalExpression>
	    			              <conditionalOrExpression>
	     			               <conditionalAndExpression>
	      			                <inclusiveOrExpression>
	       				         <exclusiveOrExpression>
	        			          <andExpression>
	         			           <equalityExpression>
		  			            <relationalExpression>
		   			             <shiftExpression>
		    			              <additiveExpression>
		     			               <mutiplicativeExpression>
							<mutiplicativeExpression>
		      			                 <unaryExpression>
		       				          <unaryExpressionNotPlusMinus>
		        			           <postfixExpression>
			 			            <expressionName>
			  			             <identifier>accumulator</identifier>
			 			            </expressionName>
						           </postfixExpression>
		       				          </unaryExpressionNotPlusMinus>
		      				         </unaryExpression>
		     			               	</mutiplicativeExpression>
							<multiOperator>/</multiOperator>
		      			                <unaryExpression>
		       				         <unaryExpressionNotPlusMinus>
		        			          <postfixExpression>
			 			           <expressionName>
			  			            <identifier>_item</identifier>
			 			           </expressionName>
						          </postfixExpression>
		       				         </unaryExpressionNotPlusMinus>
		      				        </unaryExpression>
		     			               </mutiplicativeExpression>
						      </additiveExpression>
						     </shiftExpression>
		  			            </relationalExpression>
	         			           </equalityExpression>
					          </andExpression>
	       				         </exclusiveOrExpression>
	      				        </inclusiveOrExpression>
	     			               </conditionalAndExpression>
	    			              </conditionalOrExpression>
	   			             </conditionalExpression>
	  			            </assignmentExpression>
					   </expression>
					  </lambdaBody>
			    	       	 </lambdaExpression>
			THEN REPLACE $operator WITH "/="
			ELSE
			  REPLACE $operator WITH "%="       
		 FOR VIEW $lambdaExp IN $arguments//argument//lambdaExpression
		 WHERE $last = "true"
	      ELSE 
	      	 UPDATE $sStmt IN $loopStmt//statement BY
			MATCH -> updateStatement($sStmt, $vStmt)
			| UNMATCHS -> DELETE .
			| UNMATCHV -> CREATE VALUE <statement 
		  	      	     	      atype = ""
					      marker = ""
					      isOperationChain = "">
					    <emptyStatement/>
		  	      	     	   </statement>
	      	 FOR VIEW $vStmt IN $arguments//statement
	      	 MATCHING SOURCE BY $sStmt/@marker/string() VIEW BY $vStmt/@marker/string()
	      	 WHERE $sStmt/@operation = $opMarker;
	     	 UPDATE $sExp IN $loopStmt//ifStatement/expression BY
			MATCH -> updateExpression($sExp, $vExp)
			| UNMATCHV -> CREATE VALUE 
		  	      	     	<expression>
					 <assignmentExpression>
				          <conditionalExpression>
	    			           <conditionalOrExpression>
	     			            <conditionalAndExpression>
	      			             <inclusiveOrExpression>
	       				      <exclusiveOrExpression>
	        			       <andExpression>
	         			        <equalityExpression>
		  			         <relationalExpression>
		   			          <shiftExpression>
		    			           <additiveExpression>	
		     			            <mutiplicativeExpression>
		      			             <unaryExpression>
		       				      <unaryExpressionNotPlusMinus>
		        			       <postfixExpression>
			 			        <expressionName>
			  			         <identifier/>
			 			        </expressionName>
						       </postfixExpression>
		       				      </unaryExpressionNotPlusMinus>
		      				     </unaryExpression>
		     			            </mutiplicativeExpression>
		    			           </additiveExpression>
		   			          </shiftExpression>
		  			         </relationalExpression>
	         			        </equalityExpression>
					       </andExpression>
	       				      </exclusiveOrExpression>
	      				     </inclusiveOrExpression>
	     			            </conditionalAndExpression>
	    			           </conditionalOrExpression>
	   			          </conditionalExpression>
	  			         </assignmentExpression>
					</expression>
	      	   FOR VIEW $vExp IN $arguments//lambdaBody/expression
	      	   MATCHING SOURCE BY $sExp/@marker VIEW BY $vExp/@marker
	      	   WHERE $sExp/@operation = $opMarker;
	           updateByMethodInvocation($var, $collection, $loopStmt, $operation/operation, $methodInvocation)
	ELSE 
	   stopForLoopUpd($enhancedForStatement, $methodInvocation)
}


PROCEDURE updateByMethodName(source $src AS s:operation?, view $id AS v:identifier, view $opMarker AS String) =
UPDATE $op IN $src/operation BY
	MATCH -> REPLACE ./opName WITH $id
	| UNMATCHS -> KEEP .
	| UNMATCHV -> CREATE VALUE <operation>
	  	      	     	    <opId/>
				    <opName/>
				   </operation>
FOR VIEW $opMarker

PROCEDURE updateByLastStatement(source $src AS s:statement, view $view AS v:statement) =
UPDATE $sStmt IN $src//statement BY
       REPLACE . WITH $vStmt
FOR VIEW $vStmt IN $view
MATCHING SOURCE BY $sStmt/@marker/string() VIEW BY $vStmt/@marker/string()
WHERE $sStmt/@isLast = "true"

PROCEDURE updateByLeftHandSide(source $src AS s:statement, view $view AS v:leftHandSide) =
 

PROCEDURE updateString(source $src AS String, view $view AS String) =
UPDATE $sString IN $src BY
	REPLACE . WITH $vString
FOR VIEW $vString IN $view